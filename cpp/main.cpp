#if __has_include(<SDL2/SDL.h>)
	#include <SDL2/SDL.h>
	#include <SDL2/SDL_image.h>
	#include <SDL2/SDL_ttf.h>
*#else
	#include <SDL.h>
	#include <SDL_image.h>
	#include <SDL_ttf.h>
#endif

#include <iostream>
#include <vector>

#define WIDTH 1600
#define HEIGHT 900
#define FONT_SIZE 32
#define TILE_SIZE 64
#define MAP_SIZE_SAMPLE 25//13
#define SPEED 30

#define PI 3.14159265359

//const int CAR_IMAGE_DATA[] = {137,80,78,71,13,10,26,10,0,0,0,13,73,72,68,82,0,0,0,24,0,0,0,7,8,6,0,0,0,18,247,141,182,0,0,11,111,122,84,88,116,82,97,119,32,112,114,111,102,105,108,101,32,116,121,112,101,32,101,120,105,102,0,0,120,218,165,152,107,114,228,56,14,132,255,243,20,123,4,190,64,144,199,225,51,98,111,176,199,223,15,148,236,113,119,187,103,122,99,93,81,146,138,146,72,2,72,36,18,118,251,63,255,62,238,95,252,165,32,217,101,209,90,90,41,158,191,220,114,139,157,139,234,159,191,126,143,193,231,123,124,126,124,220,11,63,142,59,175,239,141,200,80,226,156,158,159,181,188,227,155,241,200,243,241,29,159,239,60,157,113,249,50,81,219,239,141,241,227,141,254,78,20,235,187,192,59,254,177,80,10,207,2,126,189,19,245,119,162,20,223,149,243,243,123,188,43,151,86,245,171,9,239,123,102,126,120,207,247,235,236,144,147,198,34,37,104,230,152,163,87,45,141,235,26,125,86,252,182,108,163,103,198,102,239,201,120,230,249,249,183,251,120,52,178,167,184,83,72,254,30,235,179,203,244,124,59,95,225,24,82,178,231,82,122,174,57,198,84,174,127,189,35,100,209,28,30,218,235,219,237,63,189,249,131,111,62,206,191,249,115,127,98,214,11,135,31,194,253,121,245,194,192,125,220,200,253,123,24,148,253,62,145,126,138,94,249,60,223,113,247,243,141,32,223,135,251,198,244,203,142,52,191,87,241,25,255,156,104,169,239,63,24,93,255,250,158,179,234,57,251,177,174,231,130,201,229,53,234,195,196,224,110,40,207,26,6,130,251,90,225,163,124,133,107,189,159,198,167,178,204,4,99,203,79,63,248,204,208,66,36,196,39,228,176,66,15,199,133,125,47,102,152,236,49,199,29,149,115,140,51,166,59,86,137,69,139,147,240,135,148,237,19,78,212,212,210,74,149,208,79,160,146,24,141,231,184,119,47,225,174,219,238,122,147,196,92,126,5,30,141,129,201,2,175,252,227,199,253,201,67,127,247,57,199,114,41,132,39,69,250,117,24,251,138,150,134,108,195,34,103,71,30,35,34,225,188,78,149,235,224,143,207,143,128,124,3,155,8,161,92,55,87,12,236,126,60,83,12,9,127,97,43,221,64,39,158,19,206,79,114,7,93,207,251,54,81,102,109,97,51,33,17,2,95,66,146,80,130,215,24,53,4,28,89,9,80,15,190,198,148,227,32,2,65,36,46,54,25,115,74,133,216,144,4,44,237,120,71,195,125,54,74,124,198,97,73,34,33,169,36,37,54,45,117,130,149,179,128,31,205,21,12,117,73,146,69,164,136,74,149,38,189,164,146,29,25,86,138,22,163,219,174,73,179,138,22,85,173,218,180,215,84,115,149,90,170,214,90,91,237,45,182,4,27,75,35,29,91,109,173,245,206,154,157,153,123,113,157,231,59,35,35,142,52,242,144,81,134,142,58,218,232,19,248,204,60,101,150,169,179,206,54,251,138,43,45,242,120,149,165,171,174,182,250,14,27,40,237,188,197,237,178,117,215,221,118,63,96,237,164,147,143,156,114,244,212,211,78,255,140,218,27,213,95,62,255,67,212,194,27,181,120,35,101,207,233,103,212,24,85,125,206,238,226,133,73,44,102,68,44,230,64,196,213,34,0,160,163,197,204,215,144,115,180,200,89,204,124,51,130,148,200,38,197,98,179,130,239,161,196,236,82,222,33,202,9,159,177,251,43,114,255,83,220,92,201,127,27,183,248,167,145,115,22,186,255,51,114,55,110,110,203,151,184,125,19,181,101,116,55,111,196,158,44,52,159,250,68,246,237,82,106,143,181,239,157,38,166,133,52,37,157,19,253,52,18,28,195,88,206,75,31,184,107,31,62,51,198,5,31,98,28,246,139,248,53,70,172,68,175,145,43,107,234,88,184,129,26,23,221,42,76,147,86,217,137,215,186,156,227,251,236,48,228,90,43,44,201,189,179,90,24,41,89,28,6,115,159,154,165,79,61,91,59,243,156,117,242,56,59,100,117,54,219,55,147,213,83,148,44,61,29,52,205,121,252,96,217,154,119,62,7,159,232,57,57,74,223,163,143,212,103,202,101,148,229,82,167,144,245,160,196,1,115,215,76,205,231,66,61,61,37,236,37,96,96,100,72,182,207,185,177,151,188,110,130,229,128,12,247,225,167,89,203,182,229,161,17,251,217,189,205,177,71,236,39,101,208,60,214,232,132,173,197,220,106,26,59,197,144,235,84,220,76,68,86,238,26,202,42,149,122,157,196,51,111,155,178,130,184,245,248,234,90,71,52,190,218,199,10,92,135,80,70,176,95,109,15,229,66,87,180,95,21,52,238,185,65,232,89,133,2,237,98,146,53,118,189,143,146,78,248,226,212,128,47,107,46,125,232,111,60,184,50,128,147,12,238,56,104,157,35,32,253,230,198,147,2,19,232,233,75,40,74,6,184,217,135,72,157,27,198,2,87,73,26,57,172,123,222,229,48,68,79,91,70,125,95,198,221,231,141,212,199,193,213,138,233,117,119,157,30,60,225,182,139,185,83,21,240,178,164,238,40,108,115,98,221,94,221,166,221,179,201,12,162,110,196,50,26,69,114,228,101,17,62,108,150,36,213,22,198,40,167,229,233,1,92,1,70,179,166,93,227,136,230,53,242,163,177,137,116,146,46,155,76,87,215,27,53,232,30,191,193,35,132,164,9,50,162,149,205,246,230,233,137,137,138,230,88,1,3,60,161,10,116,72,162,84,180,217,131,187,141,39,40,123,184,92,111,68,78,27,160,118,236,133,99,107,235,191,91,247,93,150,34,178,186,228,52,15,40,194,194,81,212,249,177,214,89,179,96,87,34,34,160,18,220,15,124,176,8,247,216,125,214,133,94,76,3,212,122,109,54,81,145,6,47,178,0,88,60,73,106,152,101,205,237,18,133,222,120,161,140,165,117,85,182,30,136,88,35,96,227,34,43,38,12,10,71,122,48,246,139,189,121,168,99,28,99,82,114,165,111,115,236,12,189,57,214,87,96,65,14,133,214,79,153,29,94,217,212,115,237,178,184,204,71,37,114,168,97,99,40,218,200,252,81,233,17,224,38,157,184,3,242,186,204,226,16,166,240,209,202,187,78,234,8,56,5,71,132,173,45,9,91,26,13,70,47,96,133,196,95,22,48,221,229,144,237,103,228,27,250,88,234,131,114,21,215,51,155,59,115,29,163,132,98,0,3,7,230,167,79,103,130,151,77,66,197,131,99,148,141,137,240,179,155,190,168,227,216,50,60,63,229,77,90,72,200,127,204,253,237,212,200,129,86,102,131,219,41,70,112,148,84,10,66,224,162,203,192,111,190,56,0,119,34,21,19,164,227,73,178,186,139,223,70,252,141,210,208,43,187,71,53,192,75,41,205,193,35,122,157,11,255,220,100,217,229,226,136,66,181,156,6,18,141,205,237,3,99,92,203,131,95,39,10,12,57,23,74,59,198,92,162,169,193,34,38,112,17,125,11,64,206,214,39,115,64,1,169,155,214,58,203,21,179,86,79,48,32,214,190,142,63,100,90,242,93,2,11,83,155,180,120,128,12,198,98,135,205,16,247,123,55,234,231,201,18,136,196,10,97,84,187,10,142,202,123,47,254,249,12,49,11,52,110,244,64,224,79,130,247,202,161,234,130,62,31,182,107,21,154,0,14,176,223,216,17,158,105,7,142,201,182,233,6,29,55,234,118,141,98,236,43,213,131,75,50,48,88,26,140,139,242,39,68,167,72,119,148,188,251,99,131,53,150,162,34,109,179,26,61,45,154,68,27,50,162,197,19,147,106,238,113,83,53,211,102,46,128,107,4,3,13,227,10,68,71,172,142,175,247,119,244,159,207,9,62,7,181,178,234,6,39,181,81,144,161,128,57,198,152,197,197,236,75,68,21,162,87,26,21,175,30,42,134,85,47,33,237,46,160,134,92,64,249,199,20,132,131,215,153,45,189,67,141,23,4,123,44,200,206,29,250,172,142,93,84,142,153,54,45,44,156,132,53,80,113,209,149,80,166,145,113,234,82,8,164,87,26,67,214,60,185,189,134,81,233,218,187,93,247,231,118,145,211,223,186,249,241,178,251,214,205,5,150,134,69,182,76,107,138,46,157,13,170,137,32,110,30,106,161,103,190,152,22,194,109,37,167,68,71,24,0,85,30,198,244,66,142,238,179,2,101,176,61,128,155,80,17,25,112,127,88,7,254,251,179,251,58,0,17,127,235,200,79,63,90,34,145,242,160,129,238,218,238,147,91,79,45,169,174,28,129,77,213,164,139,149,70,176,159,54,185,182,47,75,75,213,14,82,211,179,189,78,81,178,124,128,4,200,109,20,233,66,20,192,118,45,145,77,142,46,43,165,67,172,18,20,148,222,194,125,90,185,174,212,99,85,172,212,81,247,92,247,117,178,241,125,236,121,200,150,187,15,57,56,110,175,240,86,119,66,130,33,208,21,44,200,54,22,13,201,216,83,136,118,15,38,205,168,35,37,14,191,176,31,235,0,68,76,149,142,5,212,101,183,178,17,149,121,9,241,220,20,249,24,76,108,198,93,72,82,114,20,158,131,239,232,195,34,97,65,117,224,155,145,203,85,90,231,245,227,65,52,90,248,235,173,82,223,109,23,155,186,223,144,5,88,64,13,151,223,237,93,210,68,141,196,220,41,17,9,81,156,89,177,161,202,16,121,219,28,9,110,70,235,96,169,195,151,97,103,50,106,88,141,33,133,34,148,50,181,3,200,142,28,206,167,22,199,160,95,165,76,180,102,131,8,7,249,198,206,73,64,88,196,90,138,69,1,129,131,187,65,147,154,120,241,220,97,129,51,55,21,112,121,211,251,186,115,114,212,29,84,126,217,113,160,56,251,7,59,80,202,234,38,57,250,128,112,97,33,244,249,34,125,101,89,103,200,28,11,214,68,219,13,214,213,128,140,174,221,213,116,134,166,71,1,116,36,212,253,79,65,70,111,86,200,144,118,161,67,2,210,105,9,26,91,203,48,35,206,242,56,107,222,58,135,62,49,223,210,176,184,102,129,86,234,248,85,12,214,151,138,249,115,250,74,37,128,164,241,136,46,104,20,149,159,73,62,43,109,200,123,240,108,202,159,54,130,93,109,28,47,206,231,51,16,210,99,82,157,82,49,142,160,236,147,133,212,60,24,119,161,0,34,211,5,45,229,66,36,119,100,130,230,65,89,43,117,103,56,103,162,199,209,164,214,138,54,179,156,48,160,139,11,41,64,235,212,60,28,10,39,161,109,52,18,115,138,238,111,29,0,118,136,109,54,17,225,197,0,118,110,175,145,64,15,30,110,48,35,148,246,179,61,239,75,223,189,227,246,164,47,207,68,114,162,246,240,108,170,126,90,19,17,125,77,139,175,208,251,196,186,55,29,21,106,159,108,104,130,73,74,105,160,113,64,152,169,74,38,123,58,189,8,194,132,174,174,102,218,58,83,248,16,93,66,154,195,128,125,209,72,62,74,4,106,49,37,98,153,113,134,190,74,4,14,67,227,8,142,220,144,63,77,171,152,102,235,112,54,218,26,173,28,231,236,52,123,208,75,184,255,148,17,111,179,25,222,47,3,1,213,252,180,15,120,241,150,120,178,25,49,90,199,164,99,69,227,7,233,86,191,144,201,169,98,180,36,26,194,224,159,65,32,247,0,21,117,80,234,204,39,228,167,19,73,128,137,54,103,38,171,34,161,124,176,223,175,183,63,239,54,147,222,166,4,130,253,103,235,78,219,161,19,68,224,219,56,185,157,159,236,137,215,242,143,238,9,112,126,233,172,126,189,223,35,249,31,105,235,144,152,201,238,38,39,215,94,36,166,181,113,243,169,24,217,252,134,56,253,181,153,250,232,165,68,30,134,59,161,181,113,137,216,145,224,160,80,203,233,230,211,26,94,178,162,208,28,211,49,59,146,205,186,152,98,103,255,18,176,191,69,171,146,32,148,81,252,7,144,124,160,203,126,122,19,214,125,186,147,159,122,150,159,199,5,40,160,239,134,21,45,74,6,249,202,130,96,200,221,12,58,126,235,108,16,16,122,241,150,151,86,197,254,21,120,187,182,69,222,87,212,225,249,210,209,176,103,235,105,62,58,154,21,139,249,136,162,24,232,205,193,27,121,49,77,209,210,152,64,187,115,61,98,76,224,252,142,122,36,66,52,62,187,224,104,116,205,173,107,197,52,99,31,108,203,85,211,147,233,9,252,40,76,59,18,176,103,255,24,70,129,6,101,208,235,105,22,157,148,174,143,216,59,140,253,179,246,119,240,241,207,218,31,239,45,53,239,162,9,172,25,71,19,200,213,4,136,211,45,116,18,211,10,252,50,153,93,91,162,225,182,141,59,107,150,48,36,99,234,171,195,45,220,143,18,191,37,121,90,252,8,58,211,219,50,31,250,78,206,35,60,104,104,109,17,239,80,119,38,88,38,197,154,170,18,166,253,51,67,189,93,211,234,126,149,213,143,168,54,73,109,138,122,25,208,183,169,4,216,220,118,237,216,239,43,18,162,65,214,42,150,175,60,191,233,110,120,96,147,152,182,9,186,46,86,253,47,185,191,146,232,16,166,64,64,0,0,1,132,105,67,67,80,73,67,67,32,112,114,111,102,105,108,101,0,0,120,156,125,145,61,72,195,64,28,197,95,191,168,72,213,193,14,34,14,25,170,139,22,68,69,28,181,10,69,168,16,106,133,86,29,76,46,253,130,38,13,73,138,139,163,224,90,112,240,99,177,234,224,226,172,171,131,171,32,8,126,128,56,57,58,41,186,72,137,255,75,10,45,98,60,56,238,199,187,123,143,187,119,128,191,81,97,170,25,28,7,84,205,50,210,201,132,144,205,173,10,225,87,132,208,139,32,34,24,149,152,169,207,137,98,10,158,227,235,30,62,190,222,197,121,150,247,185,63,71,143,146,55,25,224,19,136,103,153,110,88,196,27,196,211,155,150,206,121,159,56,202,74,146,66,124,78,60,102,208,5,137,31,185,46,187,252,198,185,232,176,159,103,70,141,76,122,158,56,74,44,20,59,88,238,96,86,50,84,226,41,226,152,162,106,148,239,207,186,172,112,222,226,172,86,106,172,117,79,254,194,72,94,91,89,230,58,205,33,36,177,136,37,136,16,32,163,134,50,42,176,16,167,85,35,197,68,154,246,19,30,254,65,199,47,146,75,38,87,25,140,28,11,168,66,133,228,248,193,255,224,119,183,102,97,114,194,77,138,36,128,208,139,109,127,12,3,225,93,160,89,183,237,239,99,219,110,158,0,129,103,224,74,107,251,171,13,96,230,147,244,122,91,139,29,1,125,219,192,197,117,91,147,247,128,203,29,96,224,73,151,12,201,145,2,52,253,133,2,240,126,70,223,148,3,250,111,129,238,53,183,183,214,62,78,31,128,12,117,149,186,1,14,14,129,145,34,101,175,123,188,187,171,179,183,127,207,180,250,251,1,44,217,114,139,173,103,212,84,0,0,0,6,98,75,71,68,0,255,0,255,0,255,160,189,167,147,0,0,0,9,112,72,89,115,0,0,46,35,0,0,46,35,1,120,165,63,118,0,0,0,7,116,73,77,69,7,228,5,14,4,13,28,207,152,129,169,0,0,0,25,116,69,88,116,67,111,109,109,101,110,116,0,67,114,101,97,116,101,100,32,119,105,116,104,32,71,73,77,80,87,129,14,23,0,0,0,104,73,68,65,84,40,207,99,52,206,40,255,207,192,192,192,112,125,245,60,6,24,208,12,77,98,192,33,198,248,162,96,231,127,6,6,6,134,247,214,79,225,114,130,71,165,25,176,137,61,213,184,192,200,8,179,128,88,240,162,96,39,41,202,25,152,72,81,140,236,35,98,192,123,235,167,164,89,64,14,24,92,22,192,34,159,88,32,120,84,154,129,5,91,248,226,75,69,12,12,12,36,165,34,0,20,81,44,15,90,125,137,0,0,0,0,0,73,69,78,68,174,66,96,130}
//const int TILE_IMAGE_DATA[] = {137,80,78,71,13,10,26,10,0,0,0,13,73,72,68,82,0,0,0,64,0,0,0,32,8,6,0,0,0,162,157,126,132,0,0,3,85,122,84,88,116,82,97,119,32,112,114,111,102,105,108,101,32,116,121,112,101,32,101,120,105,102,0,0,120,218,165,150,107,146,227,42,12,133,255,179,138,187,4,75,2,36,150,195,179,106,118,48,203,191,7,76,226,164,231,213,221,54,101,132,5,22,7,62,225,196,245,159,63,134,251,15,23,5,207,206,7,181,152,98,60,112,249,228,19,103,52,236,56,175,188,106,58,252,170,215,229,119,23,158,223,252,142,31,29,12,151,192,202,249,104,113,251,59,252,24,68,123,160,213,29,39,195,31,94,2,165,190,59,202,123,71,222,129,216,246,4,219,255,152,72,232,156,224,104,59,80,222,129,132,247,204,91,123,217,51,199,100,250,186,132,246,88,129,109,143,157,183,155,149,23,229,24,34,169,71,237,249,80,141,9,109,227,195,43,246,173,77,161,163,114,154,239,133,114,198,249,248,236,30,67,25,154,184,11,201,177,106,59,85,202,121,103,220,1,53,137,204,113,34,104,179,196,229,209,181,191,135,3,50,72,128,242,180,247,182,31,207,221,124,219,155,135,253,195,229,62,179,172,157,14,111,184,159,173,157,6,238,209,97,127,72,131,216,247,8,249,64,47,62,237,242,187,143,29,20,126,143,123,49,125,81,164,126,183,248,244,95,138,202,149,180,175,88,231,61,70,179,49,250,185,186,236,35,150,28,247,162,30,75,36,183,80,142,86,102,18,172,215,34,138,226,14,104,235,42,9,197,112,92,42,114,172,29,245,40,40,149,18,49,16,15,242,212,40,211,112,212,87,163,82,133,70,207,157,21,150,185,178,44,159,129,69,226,10,252,36,126,22,26,172,146,164,137,33,1,42,82,69,224,229,49,220,214,66,107,222,180,230,171,100,152,185,17,134,50,33,24,225,149,127,22,247,153,65,127,43,99,204,179,68,180,142,136,157,27,6,93,60,143,33,100,76,114,179,198,48,32,160,177,55,53,172,13,126,148,247,132,220,96,5,204,194,218,102,195,2,243,81,206,16,37,208,149,91,178,64,11,198,5,216,147,49,105,59,223,159,129,60,230,14,16,67,2,4,71,36,9,20,233,80,102,37,194,70,26,0,101,58,140,197,115,1,1,10,129,27,68,178,23,137,96,131,67,128,169,29,222,81,90,99,57,240,233,199,87,18,36,2,14,165,130,77,146,12,88,222,7,228,143,122,67,14,229,32,193,135,16,98,208,96,33,133,28,37,122,135,19,22,163,198,249,185,205,42,234,53,104,84,85,211,164,217,196,188,5,139,166,102,150,44,39,78,130,175,113,72,56,142,201,82,74,57,99,206,140,200,57,186,140,241,25,158,194,69,138,47,161,196,162,197,74,42,185,34,125,170,175,161,198,170,213,106,170,185,113,147,134,115,220,98,211,102,45,181,220,169,35,149,186,239,193,245,216,181,91,79,61,15,228,218,144,225,71,24,113,232,176,145,70,126,82,219,84,127,41,95,160,70,155,26,47,82,115,156,62,169,193,171,122,90,183,242,5,65,38,51,16,99,79,32,174,147,0,18,154,39,179,195,200,123,158,228,38,179,35,205,15,100,96,136,12,147,77,163,35,83,100,239,196,119,226,48,232,201,238,34,247,37,110,46,250,191,114,227,207,146,115,19,221,77,114,139,155,235,225,133,219,111,168,181,249,179,93,23,177,243,20,206,61,61,4,167,175,197,204,150,185,116,173,35,23,119,172,39,28,219,47,90,145,62,109,110,64,60,173,251,78,12,191,108,174,53,93,93,238,158,142,171,203,221,211,113,89,119,79,199,101,221,61,29,151,117,247,116,92,214,221,211,113,89,119,79,199,101,221,61,29,191,228,209,119,117,188,230,209,45,29,151,12,119,79,199,37,195,221,211,113,201,112,223,139,129,207,11,254,115,186,255,1,29,237,210,11,11,14,208,164,0,0,1,132,105,67,67,80,73,67,67,32,112,114,111,102,105,108,101,0,0,120,156,125,145,61,72,195,64,28,197,95,191,168,72,213,193,14,42,14,25,170,147,5,81,17,71,173,66,17,42,132,90,161,85,7,147,75,191,160,73,67,146,226,226,40,184,22,28,252,88,172,58,184,56,235,234,224,42,8,130,31,32,78,142,78,138,46,82,226,255,146,66,139,24,15,142,251,241,238,222,227,238,29,224,111,84,152,106,6,199,1,85,179,140,116,50,33,100,115,171,66,248,21,33,244,34,136,65,132,36,102,234,115,162,152,130,231,248,186,135,143,175,119,113,158,229,125,238,207,209,163,228,77,6,248,4,226,89,166,27,22,241,6,241,244,166,165,115,222,39,142,178,146,164,16,159,19,143,25,116,65,226,71,174,203,46,191,113,46,58,236,231,153,81,35,147,158,39,142,18,11,197,14,150,59,152,149,12,149,120,138,56,166,168,26,229,251,179,46,43,156,183,56,171,149,26,107,221,147,191,48,146,215,86,150,185,78,115,24,73,44,98,9,34,4,200,168,161,140,10,44,196,105,213,72,49,145,166,253,132,135,127,200,241,139,228,146,201,85,6,35,199,2,170,80,33,57,126,240,63,248,221,173,89,152,156,112,147,34,9,32,244,98,219,31,35,64,120,23,104,214,109,251,251,216,182,155,39,64,224,25,184,210,218,254,106,3,152,249,36,189,222,214,98,71,64,223,54,112,113,221,214,228,61,224,114,7,24,120,210,37,67,114,164,0,77,127,161,0,188,159,209,55,229,128,254,91,160,123,205,237,173,181,143,211,7,32,67,93,165,110,128,131,67,96,180,72,217,235,30,239,238,234,236,237,223,51,173,254,126,0,238,175,114,114,30,34,4,119,0,0,0,6,98,75,71,68,0,255,0,255,0,255,160,189,167,147,0,0,0,9,112,72,89,115,0,0,46,35,0,0,46,35,1,120,165,63,118,0,0,0,7,116,73,77,69,7,228,5,14,4,26,18,45,163,40,56,0,0,0,25,116,69,88,116,67,111,109,109,101,110,116,0,67,114,101,97,116,101,100,32,119,105,116,104,32,71,73,77,80,87,129,14,23,0,0,0,78,73,68,65,84,104,222,237,208,49,17,0,32,12,0,177,130,72,244,96,19,15,140,44,76,32,163,67,243,6,254,46,109,205,241,34,177,179,111,230,62,122,20,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,232,3,70,126,5,199,16,117,39,60,0,0,0,0,73,69,78,68,174,66,96,130};

int MAP_SIZE;

struct object {
 SDL_Rect dest, src;
 int img;
 SDL_Color c;
 int x, y, lx, ly;
 double angle, la;
 float vel;
 int tick;
 int id;
 int count;
 SDL_Point corners[4];
 //int opacity;
} car, center, camera, car2, coin, particle;

std::vector<object> particles;

int zoom;
int tile_img;

int **grid;//[MAP_SIZE][MAP_SIZE];
std::vector<SDL_Texture*> image;

bool running;

SDL_Renderer* renderer;
SDL_Window* window;
TTF_Font *font;
SDL_Color fcolor;

SDL_Point mouse;
int frameCount, timerFPS, lastFrame, fps;

bool up, down, right, left;

float a, cX, cY, tX, tY, rX, rY;
void rotate(object* o, int c, float oX, float oY, int pw) {
 a = o->angle*(PI/180);
 cX = (o->x+(o->dest.w/2));
 cY = (o->y+(o->dest.h/2));
 tX = o->x-cX+oX;
 tY = o->y-cY+oY;
 rX = (tX*cos(a))-(tY*sin(a));
 rY = (tX*sin(a))+(tY*cos(a));
 o->corners[c].x=rX+cX-(pw/2);
 o->corners[c].y=rY+cY-(pw/2);
}

void calcCorners(object* o, int pw) {
 //o->corners[0] =
 rotate(o, 0, 0, 0, pw);
 rotate(o, 1, o->dest.w, 0, pw);
 rotate(o, 2, 0, o->dest.h, pw);
 rotate(o, 3, o->dest.w, o->dest.h, pw);
}

const float halfC = PI / 180;
float get_degrees(float input) {return input * halfC;}

void setGrid(object* r, int gx, int gy) {
 r->x = gx*TILE_SIZE - r->dest.w/2 + TILE_SIZE/2;
 r->y = gy*TILE_SIZE - r->dest.h/2 + TILE_SIZE/2;
}

SDL_Rect ca, cb;
bool gridCol(object* a, object* b) {
 ca.x=a->x; ca.y=a->y;
 cb.x=b->x; cb.y=b->y;
 ca.w=a->dest.w; ca.h=a->dest.h;
 cb.w=b->dest.w; cb.h=b->dest.h;
 return SDL_HasIntersection(&ca, &cb);
}

int val, o1, o2, o3, o4;
bool onSegment(SDL_Point p, SDL_Point q, SDL_Point r) {
    if (q.x <= std::max(p.x, r.x) && q.x >= std::min(p.x, r.x) && q.y <= std::max(p.y, r.y) && q.y >= std::min(p.y, r.y)) return true;
    return false;
}
int orientation(SDL_Point p, SDL_Point q, SDL_Point r) {
    val = (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);
    if (val == 0) return 0;
    return (val > 0)? 1: 2;
}
bool doIntersect(SDL_Point p1, SDL_Point q1, SDL_Point p2, SDL_Point q2) {
    o1 = orientation(p1, q1, p2);
    o2 = orientation(p1, q1, q2);
    o3 = orientation(p2, q2, p1);
    o4 = orientation(p2, q2, q1);
    if (o1 != o2 && o3 != o4) return true;
    if (o1 == 0 && onSegment(p1, p2, q1)) return true;
    if (o2 == 0 && onSegment(p1, q2, q1)) return true;
    if (o3 == 0 && onSegment(p2, p1, q2)) return true;
    if (o4 == 0 && onSegment(p2, q1, q2)) return true;
    return false;
}
bool touching(object a, object b) {
 if(doIntersect(a.corners[0], a.corners[1], b.corners[0], b.corners[1])) return 1;
 if(doIntersect(a.corners[0], a.corners[1], b.corners[1], b.corners[2])) return 1;
 if(doIntersect(a.corners[0], a.corners[1], b.corners[2], b.corners[3])) return 1;
 if(doIntersect(a.corners[0], a.corners[1], b.corners[3], b.corners[0])) return 1;

 if(doIntersect(a.corners[1], a.corners[2], b.corners[0], b.corners[1])) return 1;
 if(doIntersect(a.corners[1], a.corners[2], b.corners[1], b.corners[2])) return 1;
 if(doIntersect(a.corners[1], a.corners[2], b.corners[2], b.corners[3])) return 1;
 if(doIntersect(a.corners[1], a.corners[2], b.corners[3], b.corners[0])) return 1;

 if(doIntersect(a.corners[2], a.corners[3], b.corners[0], b.corners[1])) return 1;
 if(doIntersect(a.corners[2], a.corners[3], b.corners[1], b.corners[2])) return 1;
 if(doIntersect(a.corners[2], a.corners[3], b.corners[2], b.corners[3])) return 1;
 if(doIntersect(a.corners[2], a.corners[3], b.corners[3], b.corners[0])) return 1;

 if(doIntersect(a.corners[3], a.corners[0], b.corners[0], b.corners[1])) return 1;
 if(doIntersect(a.corners[3], a.corners[0], b.corners[1], b.corners[2])) return 1;
 if(doIntersect(a.corners[3], a.corners[0], b.corners[2], b.corners[3])) return 1;
 if(doIntersect(a.corners[3], a.corners[0], b.corners[3], b.corners[0])) return 1;

 return false;
}

void pushParticle(int px, int py, int angle) {
 particle.x = px; particle.y = py; particle.angle = angle;
 particles.push_back(particle);
}

int dx, dy;
void updateCar(object* c, bool u, bool d, bool l, bool r) {
 if(abs(round(c->vel))<1) {c->tick=0; } else {
   particle.src.x=10; particle.dest.w=particle.dest.h=12;
   pushParticle(c->corners[0].x, c->corners[0].y, c->angle);
   pushParticle(c->corners[2].x, c->corners[2].y, c->angle);}
   //particle.src.x=0; particle.dest.w=particle.dest.h=30;
   //pushParticle(c->corners[0].x + (c->corners[2].x-c->corners[0].x), c->corners[0].y + (c->corners[2].y-c->corners[0].y), rand() % 360);
 //if(c->vel==0) {c->tick=0; } else {pushParticle(c->corners[3].x, c->corners[3].y, c->angle);}
 c->lx = c->x;
 c->ly = c->y;
 c->la = c->angle;
 calcCorners(c, particle.dest.w);
 if(gridCol(c, &coin)) { c->count++; setGrid(&coin, rand() % MAP_SIZE, rand() % MAP_SIZE); }
 dx = cos(get_degrees(c->angle))*c->vel;
 dy = sin(get_degrees(c->angle))*c->vel;
 //if(down || up) {c->y+=dy;c->x+=dx;}//SPEED;
 c->y+=dy;c->x+=dx;//SPEED;

 //if(camera.id==c->id) {
  if(c->vel>4 || c->vel<-4) {
   if(l) c->angle-=3;//c->x+=SPEED;
   if(r) c->angle+=3;//x-=SPEED;
  }
  if(u) c->vel+=0.5;
  if(d) c->vel-=0.5;
  if(u || d) c->tick++;
 //}

 if(!u && !d) {
  if(c->vel>0) c->vel-=0.3;
  if(c->vel<0) c->vel+=0.3;
 }
 if(c->vel>SPEED/2 && c->tick<100) c->vel=SPEED/2;
 if(c->vel<-SPEED/2 && c->tick<100) c->vel=-SPEED/2;
 if(c->vel>SPEED) c->vel=SPEED;
 if(c->vel<-SPEED) c->vel=-SPEED;
}

int setImage(std::string filename) {
 image.push_back(IMG_LoadTexture(renderer, filename.c_str()));
 //std::cout << image[0] << std::endl;
 return image.size()-1;
}

bool inCamera(SDL_Rect r) {
 if(SDL_HasIntersection(&r, &camera.dest)) return 1;
 return 0;
}
bool inCamera(object* o) {return inCamera(o->dest);}

void uc(object* r) {
 r->dest.x = r->x - camera.x;
 r->dest.y = r->y - camera.y;
}

void draw(object* o) {
 SDL_RenderSetScale(renderer, zoom, zoom);
 //uc(&o);
 //o->dest.x = o->x - camera.x;
 //o->dest.y = o->y - camera.y;

 if(inCamera(o)) SDL_RenderCopyEx(renderer, image[o->img], &o->src, &o->dest, o->angle, NULL, SDL_FLIP_NONE);
}

void drawRect(SDL_Rect r) {
 if(inCamera(r)) SDL_RenderFillRect(renderer, &r);
}

void drawOutline(SDL_Rect r) {
 if(inCamera(r)) SDL_RenderDrawRect(renderer, &r);
}
void draw(std::vector<object> vo) {
 for(auto a : vo) draw(&a);
}

void fontColor(int r, int g, int b) {
 fcolor.r = r;
 fcolor.g = g;
 fcolor.b = b;
}

SDL_Surface *surface;
SDL_Texture *texture;
SDL_Rect wrect;
void write(std::string text, int x, int y) {
//TTF_SetFontOutline(font, 1);
 if (font == NULL) {
  fprintf(stderr, "error: font not found\n");
  exit(EXIT_FAILURE);
 }
 const char* t = text.c_str();
 surface = TTF_RenderText_Solid(font, t, fcolor);
 texture = SDL_CreateTextureFromSurface(renderer, surface);
 wrect.w = surface->w;
 wrect.h = surface->h;
 wrect.x = x-wrect.w;
 wrect.y = y-wrect.h;
 SDL_FreeSurface(surface);
 SDL_RenderCopy(renderer, texture, NULL, &wrect);
 SDL_DestroyTexture(texture);
}

void setCamera(int ox, int oy, int ow, int oh) {
 camera.x = ox - (WIDTH/2) + (ow/2);
 camera.y = oy - (HEIGHT/2) + (oh/2);
}
void setCamera(int ox, int oy) {setCamera(ox, oy, 0, 0);}
void setCamera(object* o) {setCamera(o->x, o->y, o->dest.w, o->dest.h);}

void update() {
 fontColor(0, 0, 0);
 if(gridCol(&car, &center)) fontColor(0, 255, 0);
 if(gridCol(&car2, &center)) fontColor(255, 0, 0);
 //setCamera(center);
 //camera(center);
 //camera((MAP_SIZE/2)*TILE_SIZE, (MAP_SIZE/2)*TILE_SIZE);

 if(camera.id==car.id) {
  updateCar(&car, up, down, left, right);
  updateCar(&car2, 1, 0, 0, 1);
 }
 if(camera.id==car2.id) {
  updateCar(&car2, up, down, left, right);
  updateCar(&car, 1, 0, 0, 1);
 }
 if(touching(car, car2)) {
  //bool u, d, l, r;
  fcolor.b=255;
  //d=up; u=down; l=right; r=left;
  //down=d; up=u; left=l; right=r;
  //if(camera.id==car.id) {car.x=car.lx; car.y=car.ly; car.angle=car.la;}
  //if(camera.id==car2.id) {car2.x=car2.lx; car2.y=car2.ly; car2.angle=car2.la;}
  //updateCar(&car);
  //updateCar(&car2);
 }

 if(camera.id==car.id) setCamera(&car);
 if(camera.id==car2.id) setCamera(&car2);
 if(camera.id==center.id) setCamera(&center);
 //setCamera(&car);
 if(camera.id==-1) {
 if(up) camera.y-=SPEED/2;
 if(down) camera.y+=SPEED/2;
 if(left) camera.x-=SPEED/2;
 if(right) camera.x+=SPEED/2;
 }
}

const Uint8 *keystates;
void input() {
    left=right=down=up=0;
    SDL_Event e;
    keystates = SDL_GetKeyboardState(NULL);
    while(SDL_PollEvent(&e)) {
        if(e.type == SDL_QUIT) running=false;
    }
    if(keystates[SDL_SCANCODE_ESCAPE]) running=false;
    if(keystates[SDL_SCANCODE_W] || keystates[SDL_SCANCODE_UP]) up=1;
    if(keystates[SDL_SCANCODE_S] || keystates[SDL_SCANCODE_DOWN]) down=1;
    if(keystates[SDL_SCANCODE_A] || keystates[SDL_SCANCODE_LEFT]) left=1;
    if(keystates[SDL_SCANCODE_D] || keystates[SDL_SCANCODE_RIGHT]) right=1;
    if(keystates[SDL_SCANCODE_P]) camera.id=center.id;
    if(keystates[SDL_SCANCODE_O]) camera.id=car.id;
    if(keystates[SDL_SCANCODE_I]) camera.id=car2.id;
    if(keystates[SDL_SCANCODE_U]) camera.id=-1; //UNLOCKED CAM

    SDL_GetMouseState(&mouse.x, &mouse.y);
}


object d;
std::string hud, controls;
void render() {
 SDL_SetRenderDrawColor(renderer, 102, 75, 71, 255);
 SDL_RenderClear(renderer);
 frameCount++;
 int timerFPS = SDL_GetTicks()-lastFrame;

 d.dest.w=d.dest.h=TILE_SIZE;
 d.src.w=d.src.h=TILE_SIZE/2;
 d.src.x=d.src.y=0;
 /*int sx=x/TILE_SIZE - 1;
 int sy=y/TILE_SIZE - 1;
 if(sx<0) sx=0;
 if(sy<0) sy=0;*/
 for(int i=0; i<MAP_SIZE; i++) {
  for(int j=0; j<MAP_SIZE; j++) {
   setGrid(&d, i, j);
   //d.x=i*TILE_SIZE;
   //d.y=j*TILE_SIZE;
   uc(&d);
   if(d.dest.x>WIDTH) {break;}
   if(d.dest.x+TILE_SIZE<0) {break;}
   //if(d.dest.y>HEIGHT) {break;}
   //if(d.dest.y+TILE_SIZE<0) {break;}
   if(d.dest.x+TILE_SIZE>0 && d.dest.x-TILE_SIZE<WIDTH && d.dest.y+TILE_SIZE>0 && d.dest.y-TILE_SIZE<HEIGHT) {
   //if(grid[i][j]==2) //SDL_SetRenderDrawColor(renderer, 240, 0, 240, 255);
   //if(grid[i][j]==1) //SDL_SetRenderDrawColor(renderer, 240, 240, 0, 255);
    d.img=tile_img;
    d.src.x=grid[i][j]*32;
    draw(&d);
    SDL_SetRenderDrawColor(renderer, 244, 147, 94, 255);
    drawOutline(d.dest);
   }
  }
 }

 d.x=(MAP_SIZE/2)*TILE_SIZE;
 d.y=(MAP_SIZE/2)*TILE_SIZE;
 uc(&d);
// d.x=d.dest.x; d.y=d.dest.y;
 SDL_SetRenderDrawColor(renderer, 0, 255, 0, 255);
 drawRect(d.dest);
 center=d;
 center.id=1;
 for(int i=0; i<particles.size(); i++) {uc(&particles[i]); draw(&particles[i]);}
 //uc(&particles); draw(&particles);
 uc(&coin); SDL_SetRenderDrawColor(renderer, 255, 255, 0, 255); drawRect(coin.dest);
 uc(&car); draw(&car);
 uc(&car2); draw(&car2);
 if(camera.id==car.id) write(std::to_string(car.vel) + ", " + std::to_string(car.tick) + " " + std::to_string(camera.id) + " " + std::to_string(car.count), mouse.x, mouse.y);
 if(camera.id==car2.id) write(std::to_string(car2.vel) + ", " + std::to_string(car2.tick) + " " + std::to_string(camera.id) + " " + std::to_string(car2.count), mouse.x, mouse.y);
 if(camera.id==center.id) write(std::to_string(center.x) + ", " + std::to_string(center.y) + " " + std::to_string(camera.id), mouse.x, mouse.y);
 if(camera.id==-1) write(std::to_string(camera.x+(WIDTH/2)) + ", " + std::to_string(camera.y+(HEIGHT/2)) + " " + std::to_string(camera.id), mouse.x, mouse.y);
 if(camera.id==car.id) hud="CAR 1";
 if(camera.id==car2.id) hud="CAR 2";
 if(camera.id==center.id) hud="CENTER";
 if(camera.id==-1) hud="CAMERA UNLOCKED";
 write(hud, FONT_SIZE/2 * hud.length() + 20, 50);
 write(controls, FONT_SIZE/2 * controls.length() + 20, HEIGHT - 25);

 SDL_RenderPresent(renderer);
}

void init() {
 //SDL_Surface i = *IMG_ReadXPMFromArray(*CAR_IMAGE_DATA);
 //image.push_back(CAR_IMAGE_DATA);
 bool sw=1;
 tile_img = setImage("tile.png");
 for(int i=0; i<MAP_SIZE; i++) {
  for(int j=0; j<MAP_SIZE; j++) {
   grid[j][i]=0;
   if(sw)grid[j][i]=1;
   sw=!sw;
  }
 }
 //camera.x=550;camera.y=250;
 camera.dest.x=camera.dest.h=0;
 camera.dest.w=WIDTH; camera.dest.h=HEIGHT;
 car.src.x=car.src.y=0;
 car.src.w=12;car.src.h=7;
 car.dest.w=40*2; car.dest.h=20*2;
 car.dest.x=WIDTH/2;
 car.dest.y=HEIGHT/2;
 car.img=setImage("car.png");
 car.x=MAP_SIZE/2 * TILE_SIZE + TILE_SIZE/2 - car.dest.w/2;
 car.y=MAP_SIZE/2 * TILE_SIZE + TILE_SIZE/2 - car.dest.h/2;
 car.vel=0;
 fontColor(0,0,0);
 camera.id=car.id=0; center.id=1;
 zoom=1;
 car2=car;
 car2.id=2; car2.x+=200; car2.angle=60;
 car2.src.x=car2.src.w;
 coin.dest.w=coin.dest.h=TILE_SIZE*.7; setGrid(&coin, rand() % MAP_SIZE, rand() % MAP_SIZE);
 setGrid(&car, rand() % MAP_SIZE, rand() % MAP_SIZE);
 setGrid(&car2, rand() % MAP_SIZE, rand() % MAP_SIZE);
 car.angle = rand() % 360;
 car2.angle = rand() % 360;
 car.count=car2.count=0;
 controls = "WASD/ARROWS to move, POIU to change camera, ESC to close";
 particle.src.x=particle.src.y=0; particle.src.w=particle.src.h=10; particle.dest.w=particle.dest.h=12; particle.img = setImage("particle.png");
}

int main(int argc, char **argv) {
    MAP_SIZE = MAP_SIZE_SAMPLE;
    if(argv[1] && atoi(argv[0])==0) MAP_SIZE = atoi(argv[1]);
    if(MAP_SIZE>9999) MAP_SIZE=9999;
    grid = new int*[MAP_SIZE]; for(int i = 0; i < MAP_SIZE; i++) {grid[i]=new int[MAP_SIZE];}
    //grid = new int[MAP_SIZE][MAP_SIZE];
    srand(time(NULL));
    running=1;
    static int lastTime=0;
    SDL_SetHint(SDL_HINT_RENDER_SCALE_QUALITY, "0");
    if(SDL_Init(SDL_INIT_EVERYTHING) < 0) std::cout << "Failed at SDL_Init()" << std::endl;
    //if(SDL_CreateWindowAndRenderer(WIDTH, HEIGHT, SDL_WINDOW_FULLSCREEN, &window, &renderer) < 0) std::cout << "Failed at SDL_CreateWindowAndRenderer()" << std::endl;
    window = SDL_CreateWindow("Game", SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, WIDTH, HEIGHT, SDL_WINDOW_SHOWN);
    renderer = SDL_CreateRenderer(window, -1, SDL_RENDERER_ACCELERATED | SDL_RENDERER_PRESENTVSYNC);
    SDL_SetWindowFullscreen(window, SDL_WINDOW_FULLSCREEN);
    TTF_Init();
    font = TTF_OpenFont("pricedown.ttf", FONT_SIZE);
    if(font == NULL) std::cout << "failed to load font" << std::endl;

    init();

    while(running) {
        lastFrame=SDL_GetTicks();
        if(lastFrame>=(lastTime+1000)) {
            lastTime=lastFrame;
            fps=frameCount;
            frameCount=0;
        }

        update();
        input();
        render();
    }
    TTF_CloseFont(font);
    SDL_DestroyRenderer(renderer);
    SDL_DestroyWindow(window);
    SDL_Quit();


    for(int i = 0; i < MAP_SIZE; i++) delete[] grid[i];
    delete[] grid;
    //std::cout << "default map size: 13" << std::endl;
    //std::cout << "pass argument to change size (max is 9999, change in the code if you wanna try larger)" << std::endl;
}
